{"version":3,"sources":["components/Profile.js","features/user.js","components/Login.js","features/theme.js","components/ChangeColor.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","user","useSelector","state","value","themColor","theme","style","color","name","age","email","initialStateValue","userSlice","createSlice","initialState","reducers","login","action","payload","logout","actions","Login","dispatch","useDispatch","onClick","themeSlice","changeColor","ChangeColor","useState","setColor","type","onChange","event","target","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","themeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAoBeA,MAff,WAEI,IAAMC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,KAAKG,SACzCC,EAAYH,aAAY,SAACC,GAAD,OAAWA,EAAMG,MAAMF,SAErD,OACI,sBAAKG,MAAO,CAAEC,MAAOH,GAArB,UACI,8CACA,uCAAUJ,EAAKQ,QACf,sCAASR,EAAKS,OACd,yCAAYT,EAAKU,a,OCbvBC,EAAoB,CAAEH,KAAM,GAAIC,IAAK,EAAGC,MAAO,IAE/CE,EAAYC,YAAY,CAC1BL,KAAM,OACNM,aAAc,CAAEX,MAAOQ,GACvBI,SAAU,CACNC,MAAO,SAACd,EAAOe,GACXf,EAAMC,MAAQc,EAAOC,SAGzBC,OAAQ,SAACjB,GACLA,EAAMC,MAAQQ,MAInB,EAA0BC,EAAUQ,QAA5BJ,EAAR,EAAQA,MAAOG,EAAf,EAAeA,OACPP,IAAf,QCFeS,MAZf,WAEI,IAAMC,EAAWC,cAEjB,OACI,gCACI,wBAAQC,QAAS,WAAQF,EAASN,EAAM,CAAER,KAAM,OAAQC,IAAK,GAAIC,MAAO,qBAAxE,mBACA,wBAAQc,QAAS,WAAQF,EAASH,MAAlC,wB,OCPNM,EAAaZ,YAAY,CAC3BL,KAAM,QACNM,aAAc,CAAEX,MAJM,IAKtBY,SAAU,CACNW,YAAa,SAACxB,EAAOe,GACjBf,EAAMC,MAAQc,EAAOC,YAIlBQ,EAAgBD,EAAWL,QAA3BM,YACAD,IAAf,QCKeE,MAbf,WAEI,IAAML,EAAWC,cACjB,EAA0BK,mBAAS,IAAnC,mBAAOrB,EAAP,KAAcsB,EAAd,KAEA,OACI,gCACI,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAYH,EAASG,EAAMC,OAAO9B,UAChE,wBAAQqB,QAAS,WAAQF,EAASI,EAAYnB,KAA9C,8BCEG2B,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,uCACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCERQ,EAAQC,YAAe,CAC3BC,QAAS,CACP/C,KAAMgD,EACN3C,MAAO4C,KAIXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.c74a325e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\n\r\nfunction Profile() {\r\n\r\n    const user = useSelector((state) => state.user.value);\r\n    const themColor = useSelector((state) => state.theme.value);\r\n\r\n    return (\r\n        <div style={{ color: themColor }}>\r\n            <h1>Profile Page</h1>\r\n            <p>Name: {user.name}</p>\r\n            <p>Age: {user.age}</p>\r\n            <p>E-Mail: {user.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialStateValue = { name: \"\", age: 0, email: \"\" };\r\n\r\nconst userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: { value: initialStateValue },\r\n    reducers: {\r\n        login: (state, action) => {\r\n            state.value = action.payload;\r\n        },\r\n\r\n        logout: (state) => {\r\n            state.value = initialStateValue;\r\n        }\r\n    }\r\n})\r\nexport const { login, logout } = userSlice.actions;\r\nexport default userSlice.reducer;","import React from \"react\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { login, logout } from '../features/user'\r\n\r\nfunction Login() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => { dispatch(login({ name: \"elad\", age: 20, email: \"elad@gmail.com\" })) }}>Login</button>\r\n            <button onClick={() => { dispatch(logout()) }}>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialStateValue = \"\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: { value: initialStateValue },\r\n    reducers: {\r\n        changeColor: (state, action) => {\r\n            state.value = action.payload;\r\n        },\r\n    }\r\n})\r\nexport const { changeColor } = themeSlice.actions;\r\nexport default themeSlice.reducer;","import React, { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { changeColor } from '../features/theme'\r\n\r\n\r\n\r\nfunction ChangeColor() {\r\n\r\n    const dispatch = useDispatch();\r\n    const [color, setColor] = useState(\"\");\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onChange={(event) => { setColor(event.target.value) }} />\r\n            <button onClick={() => { dispatch(changeColor(color)) }}>Change Color</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangeColor","import './App.css';\nimport Profile from './components/Profile';\nimport Login from './components/Login';\nimport ChangeColor from './components/ChangeColor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello</h1>\n      <Profile />\n      <Login />\n      <ChangeColor />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { configureStore } from '@reduxjs/toolkit'\nimport { Provider } from 'react-redux';\nimport userReducer from './features/user';\nimport themeReducer from './features/theme';\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n    theme: themeReducer\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}